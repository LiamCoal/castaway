<?xml version="1.0" encoding="UTF-8"?>
<!--
 - Castaway Builtin Shader
 - `default-tex`
 -->
<shader version="2">
    <vertex>
        <input name="vPosition" from="PositionXYZ"/>
        <input name="vColor" from="ColorRGB"/>
        <input name="vNormal" from="NormalXYZ"/>
        <input name="vTextureCoords" from="TextureST"/>

        <transform name="tPersp" matrix="Perspective"/>
        <transform name="tView" matrix="View"/>
        <transform name="tModel" matrix="Model"/>

        <glsl><![CDATA[
            in vec3 vPosition;
            in vec3 vColor;
            in vec3 vNormal;
            in vec2 vTextureCoords;

            out vec3 fColor;
            out vec3 fNormal;
            out vec3 fPosition;
            out vec2 fTextureCoords;

            uniform mat4 tPersp;
            uniform mat4 tView;
            uniform mat4 tModel;

            void main() {
                gl_Position = tPersp * tView * tModel * vec4(vPosition, 1);
                fColor = vColor;
                fNormal = mat3(transpose(inverse(tModel))) * vNormal;
                fPosition = vec3(tModel * vec4(vPosition, 1));
                fTextureCoords = vTextureCoords;
            }
            ]]></glsl>
    </vertex>

    <fragment>
        <output name="oColor" to="0"/>

        <uniform name="uAmbient" from="AmbientLight"/>
        <uniform name="uAmbientLightColor" from="AmbientLightColor"/>
        <uniform name="uPointLightCount" from="PointLightCount"/>
        <uniform name="uPointLights[$INDEX].Position" from="PointLightPositionIndexed"/>
        <uniform name="uPointLights[$INDEX].Color" from="PointLightColorIndexed"/>
        <uniform name="uViewPosition" from="ViewPosition"/>
        <uniform name="uSpecularStrength"/>
        <uniform name="uTexture"/> <!-- TODO there should be from="Texture" for this -->

        <glsl><![CDATA[
            struct PointLight {
                vec3 Position; // From PointLightPositionIndexed
                vec3 Color; // From PointLightColorIndexed
            };

            in vec3 fColor;
            in vec3 fNormal;
            in vec3 fPosition;
            in vec2 fTextureCoords;

            out vec4 oColor;

            uniform float uAmbient = 0.1; // From AmbientLight
            uniform vec3 uAmbientLightColor = vec3(1, 1, 1); // From AmbientLightColor
            uniform int uPointLightCount = 0; // From PointLightCount
            uniform PointLight uPointLights[32];
            uniform vec3 uViewPosition; // From ViewPosition
            uniform float uSpecularStrength = 0.5;
            uniform sampler2D uTexture;

            vec3 calculateAmbientLight(float intensity, vec3 color) {
                return color * intensity;
            }

            float calculateDiffuseLight(PointLight light, vec3 lightDirection, vec3 normal) {
                return max(dot(normal, lightDirection), 0.0);
            }

            float calculateSpecularLight(PointLight light, vec3 viewDirection, vec3 reflectDirection) {
                return pow(max(dot(viewDirection, reflectDirection), 0.0), 32.0);
            }

            vec3 processLight(PointLight light, vec3 normal) {
                vec3 lightDirection = normalize(light.Position - fPosition);
                vec3 viewDirection = normalize(uViewPosition - fPosition);
                vec3 reflectDirection = reflect(-lightDirection, normal);

                float diff = calculateDiffuseLight(light, lightDirection, normal);
                float spec = calculateSpecularLight(light, viewDirection, reflectDirection);

                return (diff * light.Color) + (uSpecularStrength * spec * light.Color);
            }

            void main() {
                vec3 normal = normalize(fNormal);
                vec3 combinedLight = calculateAmbientLight(uAmbient, uAmbientLightColor);

                for (int i = 0; i < uPointLightCount; i++) {
                    combinedLight += processLight(uPointLights[i], normal);
                }

                vec3 result = combinedLight * fColor; // FIXME this doesn't seem right :(
                oColor = vec4(result * texture(uTexture, fTextureCoords).rgb, 1);
            }
            ]]></glsl>
    </fragment>
</shader>